{
  "name": "logogrid",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/logogrid.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { AnimatePresence, motion } from \"framer-motion\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface LogoGridProps extends React.HTMLAttributes<HTMLDivElement> {\n  interval?: number\n  quantity?: number\n  children: React.ReactNode\n}\n\ninterface LogoProps extends React.HTMLAttributes<HTMLDivElement> {\n  src: string\n  alt?: string\n}\n\nconst Logo = React.forwardRef<HTMLDivElement, LogoProps>(\n  ({ className, src, alt = \"\", ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex h-8 w-28 items-center justify-center bg-transparent p-1\",\n          className\n        )}\n        {...props}\n      >\n        <div className=\"flex h-full w-full items-center justify-center\">\n          <img\n            src={src}\n            alt={alt}\n            className=\"max-h-full max-w-full object-contain\"\n          />\n        </div>\n      </div>\n    )\n  }\n)\nLogo.displayName = \"Logo\"\n\nconst LogoGrid = React.forwardRef<HTMLDivElement, LogoGridProps>(\n  ({ className, interval = 3000, quantity = 6, children, ...props }, ref) => {\n    const logos = React.Children.toArray(children)\n    const [visibleLogos, setVisibleLogos] = React.useState<number[]>([])\n    const [nextLogoIndex, setNextLogoIndex] = React.useState(0)\n    const [isVisible, setIsVisible] = React.useState(true)\n\n    // Handle visibility change\n    React.useEffect(() => {\n      const handleVisibilityChange = () => {\n        setIsVisible(!document.hidden)\n      }\n\n      document.addEventListener(\"visibilitychange\", handleVisibilityChange)\n      return () => {\n        document.removeEventListener(\"visibilitychange\", handleVisibilityChange)\n      }\n    }, [])\n\n    // Initialize with first N unique logos (or less if fewer logos provided)\n    React.useEffect(() => {\n      const numLogosToShow = Math.min(quantity, logos.length)\n      const initialLogos = Array.from({ length: numLogosToShow }, (_, i) => i)\n      setVisibleLogos(initialLogos.slice(0, quantity))\n      setNextLogoIndex(numLogosToShow)\n    }, [logos.length, quantity])\n\n    // Handle the rotation only if we have more logos than quantity and tab is visible\n    React.useEffect(() => {\n      if (logos.length <= quantity || !isVisible) return\n\n      const timer = setInterval(() => {\n        setVisibleLogos((prev) => {\n          // Find a random position to replace\n          const replaceIndex = Math.floor(Math.random() * quantity)\n\n          // Get all available indices that aren't currently visible\n          const availableIndices = Array.from(\n            { length: logos.length },\n            (_, i) => i\n          ).filter((index) => !prev.includes(index))\n\n          // If we have available indices, use the next one, otherwise start over\n          const nextIndex =\n            availableIndices.length > 0\n              ? availableIndices[0]\n              : nextLogoIndex % logos.length\n\n          const next = [...prev]\n          next[replaceIndex] = nextIndex\n          return next\n        })\n\n        setNextLogoIndex((current) => (current + 1) % logos.length)\n      }, interval)\n\n      return () => {\n        clearInterval(timer)\n      }\n    }, [interval, logos.length, nextLogoIndex, quantity, isVisible])\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          `grid gap-x-10 gap-y-7 ${\n            quantity <= 3 ? \"grid-cols-\" + quantity : \"grid-cols-3\"\n          }`,\n          className\n        )}\n        {...props}\n      >\n        <AnimatePresence mode=\"popLayout\">\n          {visibleLogos.map((logoIndex, i) => (\n            <motion.div\n              key={`${logoIndex}-${i}`}\n              initial={{ opacity: 0, filter: \"blur(10px)\", scale: 0.8 }}\n              animate={{\n                opacity: 1,\n                filter: \"blur(0px)\",\n                scale: 1,\n                transition: {\n                  opacity: { duration: 0.8 },\n                  filter: { duration: 0.6 },\n                  scale: { duration: 0.6 },\n                },\n              }}\n              exit={{\n                opacity: 0,\n                filter: \"blur(10px)\",\n                scale: 0.8,\n                transition: {\n                  opacity: { duration: 0.8 },\n                  filter: { duration: 0.6 },\n                  scale: { duration: 0.6 },\n                },\n              }}\n              style={{\n                willChange: \"opacity, filter, transform\",\n              }}\n            >\n              {logos[logoIndex]}\n            </motion.div>\n          ))}\n        </AnimatePresence>\n      </div>\n    )\n  }\n)\nLogoGrid.displayName = \"LogoGrid\"\n\nexport { LogoGrid, Logo }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
