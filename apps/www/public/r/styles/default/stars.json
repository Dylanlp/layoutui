{
  "name": "stars",
  "type": "registry:component",
  "files": [
    {
      "path": "ui/stars.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface StarImageProps {\n  src?: string\n}\n\nconst StarImage = ({ src }: StarImageProps) => {\n  return (\n    <div className=\"h-9 w-9 overflow-hidden rounded-full border-2 border-white\">\n      {src ? (\n        <img\n          src={src}\n          alt=\"Customer avatar\"\n          className=\"h-full w-full object-cover\"\n        />\n      ) : (\n        <div className=\"h-full w-full bg-gray-100\" />\n      )}\n    </div>\n  )\n}\n\ninterface StarsProps extends React.HTMLAttributes<HTMLDivElement> {\n  count?: number\n  text?: string\n  children?: React.ReactNode\n}\n\nconst Stars = React.forwardRef<HTMLDivElement, StarsProps>(\n  (\n    { className, count = 400, text = \"Trusted by\", children, ...props },\n    ref\n  ) => {\n    const images = React.Children.toArray(children)\n\n    return (\n      <div ref={ref} className={cn(\"flex items-center\", className)} {...props}>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"flex items-center\">\n            {React.Children.map(images, (image, index) => (\n              <div\n                key={index}\n                className=\"group relative -ml-2 transition-all duration-300 ease-in-out first:ml-0 hover:z-10 hover:translate-x-2 hover:scale-110\"\n                onMouseEnter={(e) => {\n                  const parent = e.currentTarget.parentElement\n                  if (parent) {\n                    const children = Array.from(parent.children)\n                    const currentIndex = children.indexOf(e.currentTarget)\n                    children.slice(currentIndex + 1).forEach((el, i) => {\n                      const distance = i + 1\n                      const scale = Math.max(0.85, 1 - distance * 0.1)\n                      ;(el as HTMLElement).style.transform = `translateX(${\n                        12 - i * 4\n                      }px) scale(${scale})`\n                    })\n                    children\n                      .slice(0, currentIndex)\n                      .reverse()\n                      .forEach((el, i) => {\n                        const distance = i + 1\n                        const scale = Math.max(0.85, 1 - distance * 0.1)\n                        ;(el as HTMLElement).style.transform = `scale(${scale})`\n                      })\n                    // Move the text container\n                    const textContainer = parent.parentElement?.querySelector(\n                      \".text-container\"\n                    ) as HTMLElement\n                    if (textContainer) {\n                      textContainer.style.transform = \"translateX(8px)\"\n                    }\n                  }\n                }}\n                onMouseLeave={(e) => {\n                  const parent = e.currentTarget.parentElement\n                  if (parent) {\n                    const children = Array.from(parent.children)\n                    children.forEach((el) => {\n                      ;(el as HTMLElement).style.transform = \"\"\n                    })\n                    // Reset text container position\n                    const textContainer = parent.parentElement?.querySelector(\n                      \".text-container\"\n                    ) as HTMLElement\n                    if (textContainer) {\n                      textContainer.style.transform = \"\"\n                    }\n                  }\n                }}\n              >\n                {image}\n              </div>\n            ))}\n          </div>\n          <div className=\"text-container transition-transform duration-300 ease-in-out\">\n            <div className=\"-ml-1 flex text-orange-400\">\n              {[...Array(5)].map((_, i) => (\n                <svg\n                  key={i}\n                  className=\"h-5 w-5 fill-current\"\n                  viewBox=\"0 0 20 20\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\n                </svg>\n              ))}\n            </div>\n            <div className=\"pb-0.5 text-sm leading-4 text-gray-600\">\n              {text} {count}+ customers\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nStars.displayName = \"Stars\"\n\nexport { Stars, StarImage }\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}
