{
  "name": "text-icons",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/text-icons.tsx",
      "content": "\"use client\"\n\nimport { Children, FC, ReactNode, isValidElement, useRef } from \"react\"\nimport { motion, useInView, useScroll, useTransform } from \"framer-motion\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface TextIconsProps {\n  children: ReactNode\n  className?: string\n}\n\nexport const TextIcons: FC<TextIconsProps> = ({ children, className }) => {\n  const targetRef = useRef<HTMLDivElement | null>(null)\n  const isInView = useInView(targetRef, {\n    margin: \"-50% 0px 0px 0px\",\n    once: true,\n  })\n\n  const { scrollYProgress } = useScroll({\n    target: targetRef,\n    offset: [\"start center\", \"end end\"],\n  })\n\n  const elements: ReactNode[] = []\n  Children.forEach(children, (child) => {\n    if (typeof child === \"string\") {\n      child.split(\" \").forEach((word) => {\n        if (word) elements.push(word)\n      })\n    } else if (isValidElement(child)) {\n      if (child.type === \"br\") {\n        // Create a proper React element for line breaks\n        elements.push(<div key={`br-${elements.length}`} className=\"w-full\" />)\n      } else {\n        elements.push(child)\n      }\n    }\n  })\n\n  return (\n    <div ref={targetRef} className={cn(\"relative z-0 h-screen\", className)}>\n      <div className={\"max-w-5xl items-center \"}>\n        <p\n          className={\n            \"flex flex-wrap p-5 text-2xl font-medium leading-loose tracking-tighter text-black/20 dark:text-white/20 md:p-8 md:text-3xl lg:text-4xl xl:text-[50px]\"\n          }\n        >\n          {elements.map((element, i) => {\n            const start = i / elements.length\n            const end = start + 0.5 / elements.length\n\n            if (\n              isValidElement(element) &&\n              element.type === \"div\" &&\n              element.props.className === \"w-full\"\n            ) {\n              return element // Return the line break element directly\n            }\n\n            if (isValidElement(element)) {\n              return (\n                <Word\n                  key={i}\n                  progress={scrollYProgress}\n                  range={[start, end]}\n                  isInView={isInView}\n                >\n                  {element}\n                </Word>\n              )\n            }\n\n            return (\n              <Word\n                key={i}\n                progress={scrollYProgress}\n                range={[start, end]}\n                isInView={isInView}\n              >\n                {element}\n              </Word>\n            )\n          })}\n        </p>\n      </div>\n    </div>\n  )\n}\n\ninterface WordProps {\n  children: ReactNode\n  progress: any\n  range: [number, number]\n  isInView: boolean\n}\n\nconst Word: FC<WordProps> = ({ children, progress, range, isInView }) => {\n  const opacity = useTransform(progress, range, [0, 1])\n  const fadeOutOpacity = useTransform(progress, range, [0.3, 0]) // Adjusted from 0.4 to 0.3\n\n  if (isValidElement(children)) {\n    return (\n      <span className=\"relative mx-1 my-0.5 inline-block lg:mx-2 lg:my-3\">\n        <motion.span\n          className=\"absolute text-black/20 dark:text-white/20\"\n          initial={{ opacity: 0.3 }}\n          style={{ opacity: isInView ? fadeOutOpacity : 0.3 }}\n        >\n          {children}\n        </motion.span>\n        <motion.span\n          initial={{ opacity: 0 }}\n          style={{ opacity: isInView ? opacity : 0 }}\n          className=\"relative text-black dark:text-white\"\n        >\n          {children}\n        </motion.span>\n      </span>\n    )\n  }\n\n  return (\n    <span className=\"xl:lg-3 relative mx-1 my-0.5 lg:mx-2 lg:my-3\">\n      <motion.span\n        className=\"absolute text-black/20 dark:text-white/20\"\n        initial={{ opacity: 0.3 }}\n        style={{ opacity: isInView ? fadeOutOpacity : 0.3 }}\n      >\n        {children}\n      </motion.span>\n      <motion.span\n        initial={{ opacity: 0 }}\n        style={{ opacity: isInView ? opacity : 0 }}\n        className=\"relative text-black dark:text-white\"\n      >\n        {children}\n      </motion.span>\n    </span>\n  )\n}\n\nexport default TextIcons\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}