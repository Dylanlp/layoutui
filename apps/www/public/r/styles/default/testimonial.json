{
  "name": "testimonial",
  "type": "registry:component",
  "dependencies": ["framer-motion"],
  "files": [
    {
      "path": "ui/testimonial.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport {\n  motion,\n  useAnimationFrame,\n  useMotionValue,\n  useTransform,\n} from \"framer-motion\"\n\nimport { cn } from \"@/lib/utils\"\n\n// TestimonialCard\ninterface TestimonialCardProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst TestimonialCard = React.forwardRef<HTMLDivElement, TestimonialCardProps>(\n  ({ className, children, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex w-80 flex-col gap-4 rounded-2xl border-[0.5px] border-border bg-background p-4 shadow-sm transition-all duration-300 hover:scale-[1.03]\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n)\nTestimonialCard.displayName = \"TestimonialCard\"\n\n// TestimonialHeader - New component to handle avatar + name/username layout\nconst TestimonialHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, children, ...props }, ref) => {\n  return (\n    <div\n      className={cn(\"flex items-center gap-2 text-left\", className)}\n      ref={ref}\n      {...props}\n    >\n      {children}\n    </div>\n  )\n})\nTestimonialHeader.displayName = \"TestimonialHeader\"\n\n// TestimonialAvatar\ninterface TestimonialAvatarProps extends React.HTMLAttributes<HTMLDivElement> {\n  src?: string\n  alt?: string\n}\n\nconst TestimonialAvatar = React.forwardRef<\n  HTMLDivElement,\n  TestimonialAvatarProps\n>(({ className, src, alt, ...props }, ref) => {\n  return (\n    <div\n      className=\"h-10 w-10 overflow-hidden rounded-full\"\n      ref={ref}\n      {...props}\n    >\n      {src ? (\n        <img src={src} alt={alt} className=\"h-full w-full object-cover\" />\n      ) : (\n        <div className=\"h-full w-full bg-muted\" />\n      )}\n    </div>\n  )\n})\nTestimonialAvatar.displayName = \"TestimonialAvatar\"\n\n// TestimonialInfo - New component to wrap Name and Username\nconst TestimonialInfo = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, children, ...props }, ref) => {\n  return (\n    <div\n      className={cn(\"flex flex-col justify-start gap-0.5 text-left\", className)}\n      ref={ref}\n      {...props}\n    >\n      {children}\n    </div>\n  )\n})\nTestimonialInfo.displayName = \"TestimonialInfo\"\n\n// Name\nconst Name = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  return (\n    <p\n      ref={ref}\n      className={cn(\"text-left text-sm leading-4 text-foreground\", className)}\n      {...props}\n    >\n      {children}\n    </p>\n  )\n})\nName.displayName = \"Name\"\n\n// Username\nconst Username = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  return (\n    <p\n      ref={ref}\n      className={cn(\n        \"text-left text-sm leading-4 text-muted-foreground\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </p>\n  )\n})\nUsername.displayName = \"Username\"\n\n// Stars component\nconst TestimonialStars = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  return (\n    <div className={cn(\"flex items-center\", className)} ref={ref} {...props}>\n      {Array.from({ length: 5 }).map((_, index) => (\n        <svg\n          key={index}\n          className=\"h-5 w-5 fill-current text-orange-400\"\n          viewBox=\"0 0 20 20\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\" />\n        </svg>\n      ))}\n    </div>\n  )\n})\nTestimonialStars.displayName = \"TestimonialStars\"\n\n// TestimonialContent\nconst TestimonialContent = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  return (\n    <p\n      ref={ref}\n      className={cn(\"text-sm text-foreground\", className)}\n      {...props}\n    >\n      {children}\n    </p>\n  )\n})\nTestimonialContent.displayName = \"TestimonialContent\"\n\n// TestimonialHighlight\nconst TestimonialHighlight = React.forwardRef<\n  HTMLSpanElement,\n  React.HTMLAttributes<HTMLSpanElement>\n>(({ className, children, ...props }, ref) => {\n  return (\n    <span\n      ref={ref}\n      className={cn(\n        \"bg-gradient-to-r from-yellow-100 to-transparent\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </span>\n  )\n})\nTestimonialHighlight.displayName = \"TestimonialHighlight\"\n\n// TestimonialDate\nconst TestimonialDate = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  return (\n    <p\n      ref={ref}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    >\n      {children}\n    </p>\n  )\n})\nTestimonialDate.displayName = \"TestimonialDate\"\n\n// TestimonialCarousel\ninterface TestimonialCarouselProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  speed?: number // Duration in seconds for one complete cycle\n  pauseOnHover?: boolean\n  direction?: \"ltr\" | \"rtl\"\n}\n\nconst TestimonialCarousel = React.forwardRef<\n  HTMLDivElement,\n  TestimonialCarouselProps\n>(\n  ({\n    className,\n    children,\n    speed = 30,\n    direction = \"ltr\",\n    pauseOnHover = true,\n    ...props\n  }, ref) => {\n    const [isPaused, setIsPaused] = React.useState(false)\n    const baseX = useMotionValue(0)\n    const x = useTransform(baseX, (value) => `${value}%`)\n    const containerRef = React.useRef<HTMLDivElement>(null)\n\n    useAnimationFrame((time, delta) => {\n      if (isPaused) return\n\n      let newX = baseX.get()\n      const moveAmount = (delta / 16.666) * 0.05\n\n      if (direction === \"rtl\") {\n        newX += moveAmount\n        if (newX >= 0) newX = -50\n      } else {\n        newX -= moveAmount\n        if (newX <= -50) newX = 0\n      }\n\n      baseX.set(newX)\n    })\n\n    return (\n      <div\n        className=\"relative flex w-full overflow-hidden p-4\"\n        ref={ref}\n        onMouseEnter={() => pauseOnHover && setIsPaused(true)}\n        onMouseLeave={() => pauseOnHover && setIsPaused(false)}\n        {...props}\n      >\n        <motion.div className=\"flex gap-4\" style={{ x }} ref={containerRef}>\n          {children}\n          {children}\n        </motion.div>\n      </div>\n    )\n  }\n)\nTestimonialCarousel.displayName = \"TestimonialCarousel\"\n\nexport {\n  TestimonialCard,\n  TestimonialHeader,\n  TestimonialAvatar,\n  TestimonialInfo,\n  Name,\n  Username,\n  TestimonialStars,\n  TestimonialContent,\n  TestimonialHighlight,\n  TestimonialDate,\n  TestimonialCarousel,\n}",
      "type": "registry:component",
      "target": ""
    }
  ]
}
