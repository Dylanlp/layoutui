{
  "name": "verticaltestimonial",
  "type": "registry:component",
  "dependencies": ["framer-motion"],
  "files": [
    {
      "path": "ui/verticaltestimonial.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { useInView } from \"framer-motion\"\n\nimport { cn } from \"@/lib/utils\"\n\n// VerticalTestimonial\ninterface VerticalTestimonialProps\n  extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst VerticalTestimonial = React.forwardRef<\n  HTMLDivElement,\n  VerticalTestimonialProps\n>(({ className, children, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"flex flex-col items-center justify-center gap-5 text-center\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  )\n})\nVerticalTestimonial.displayName = \"VerticalTestimonial\"\n\n// VerticalTestimonialContent\nconst VerticalTestimonialContent = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  return (\n    <p\n      ref={ref}\n      className={cn(\n        \"text-pretty text-2xl leading-snug tracking-tight text-foreground\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </p>\n  )\n})\nVerticalTestimonialContent.displayName = \"VerticalTestimonialContent\"\n\n// VerticalTestimonialHighlight\ninterface VerticalTestimonialHighlightProps\n  extends React.HTMLAttributes<HTMLSpanElement> {\n  children: React.ReactNode\n  resetKey?: number\n}\n\nconst VerticalTestimonialHighlight = React.forwardRef<\n  HTMLSpanElement,\n  VerticalTestimonialHighlightProps\n>(({ className, children, resetKey = 0, ...props }, ref) => {\n  const highlightRef = React.useRef(null)\n  const isInView = useInView(highlightRef, { once: false })\n  const [shouldAnimate, setShouldAnimate] = React.useState(false)\n\n  React.useEffect(() => {\n    if (isInView) {\n      setShouldAnimate(true)\n    }\n  }, [isInView])\n\n  React.useEffect(() => {\n    setShouldAnimate(false)\n    const timer = setTimeout(() => {\n      if (isInView) {\n        setShouldAnimate(true)\n      }\n    }, 50)\n    return () => clearTimeout(timer)\n  }, [resetKey, isInView])\n\n  return (\n    <span\n      ref={highlightRef}\n      className={cn(\"relative inline-block\", className)}\n      {...props}\n    >\n      <span className=\"relative z-10\">{children}</span>\n      <span\n        className={cn(\n          \"absolute inset-0 bg-gradient-to-r from-yellow-100 from-50% to-yellow-100/20\",\n          shouldAnimate && \"animate-highlight\"\n        )}\n        aria-hidden=\"true\"\n      />\n    </span>\n  )\n})\nVerticalTestimonialHighlight.displayName = \"VerticalTestimonialHighlight\"\n\n// VerticalTestimonialAvatar\ninterface VerticalTestimonialAvatarProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  src?: string\n  alt?: string\n}\n\nconst VerticalTestimonialAvatar = React.forwardRef<\n  HTMLDivElement,\n  VerticalTestimonialAvatarProps\n>(({ className, src, alt, ...props }, ref) => {\n  return (\n    <div\n      className=\"h-10 w-10 overflow-hidden rounded-full bg-muted\"\n      ref={ref}\n      {...props}\n    >\n      {src && (\n        <img src={src} alt={alt} className=\"h-full w-full object-cover\" />\n      )}\n    </div>\n  )\n})\nVerticalTestimonialAvatar.displayName = \"VerticalTestimonialAvatar\"\n\n// VerticalTestimonialInfo\nconst VerticalTestimonialInfo = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, children, ...props }, ref) => {\n  return (\n    <div\n      className={cn(\"flex flex-col justify-start gap-0.5\", className)}\n      ref={ref}\n      {...props}\n    >\n      {children}\n    </div>\n  )\n})\nVerticalTestimonialInfo.displayName = \"VerticalTestimonialInfo\"\n\n// VerticalTestimonialName\nconst VerticalTestimonialName = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  return (\n    <p\n      ref={ref}\n      className={cn(\"text-sm leading-4 text-foreground\", className)}\n      {...props}\n    >\n      {children}\n    </p>\n  )\n})\nVerticalTestimonialName.displayName = \"VerticalTestimonialName\"\n\n// VerticalTestimonialRole\nconst VerticalTestimonialRole = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  return (\n    <p\n      ref={ref}\n      className={cn(\"text-sm leading-4 text-muted-foreground\", className)}\n      {...props}\n    >\n      {children}\n    </p>\n  )\n})\nVerticalTestimonialRole.displayName = \"VerticalTestimonialRole\"\n\nexport {\n  VerticalTestimonial,\n  VerticalTestimonialContent,\n  VerticalTestimonialHighlight,\n  VerticalTestimonialAvatar,\n  VerticalTestimonialInfo,\n  VerticalTestimonialName,\n  VerticalTestimonialRole,\n}",
      "type": "registry:component",
      "target": ""
    }
  ]
}
