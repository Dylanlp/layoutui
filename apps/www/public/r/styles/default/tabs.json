{
  "name": "tabs",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-tabs"
  ],
  "files": [
    {
      "path": "ui/tabs.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\nimport { motion } from \"framer-motion\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst defaultTriggerClasses =\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:text-foreground\"\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => {\n  const [activeRect, setActiveRect] = React.useState<DOMRect | null>(null)\n  const [listHeight, setListHeight] = React.useState<number | null>(null)\n  const [listPadding, setListPadding] = React.useState<string>(\"p-1\")\n  const [activeTabClasses, setActiveTabClasses] = React.useState<string>(\"\")\n  const listRef = React.useRef<HTMLDivElement | null>(null)\n\n  React.useEffect(() => {\n    const updateMeasurements = () => {\n      const activeTab = listRef.current?.querySelector(\n        '[role=\"tab\"][data-state=\"active\"]'\n      ) as HTMLElement\n      if (activeTab && listRef.current) {\n        const tabRect = activeTab.getBoundingClientRect()\n        const listRect = listRef.current.getBoundingClientRect()\n        const listStyle = window.getComputedStyle(listRef.current)\n        const paddingClass =\n          listRef.current?.className.match(/p-\\d+/)?.[0] || \"p-1\"\n        setListPadding(paddingClass)\n\n        setActiveRect({\n          width: tabRect.width,\n          height: tabRect.height,\n          top: tabRect.top - listRect.top,\n          left: tabRect.left - listRect.left,\n          x: tabRect.left - listRect.left,\n          y: tabRect.top - listRect.top,\n          bottom: tabRect.bottom - listRect.top,\n          right: tabRect.right - listRect.left,\n          toJSON: () => ({\n            x: tabRect.left - listRect.left,\n            y: tabRect.top - listRect.top,\n            width: tabRect.width,\n            height: tabRect.height,\n            top: tabRect.top - listRect.top,\n            right: tabRect.right - listRect.left,\n            bottom: tabRect.bottom - listRect.top,\n            left: tabRect.left - listRect.left,\n          }),\n        })\n        setListHeight(listRect.height)\n        setActiveTabClasses(\n          activeTab.className.replace(defaultTriggerClasses, \"\").trim()\n        )\n      }\n    }\n\n    updateMeasurements()\n    window.addEventListener(\"resize\", updateMeasurements)\n\n    const observer = new MutationObserver(updateMeasurements)\n    observer.observe(listRef.current!, {\n      subtree: true,\n      attributes: true,\n      attributeFilter: [\"data-state\", \"class\"],\n    })\n\n    return () => {\n      window.removeEventListener(\"resize\", updateMeasurements)\n      observer.disconnect()\n    }\n  }, [])\n\n  return (\n    <div className=\"relative\">\n      <TabsPrimitive.List\n        ref={(node) => {\n          if (typeof ref === \"function\") {\n            ref(node)\n          } else if (ref) {\n            ref.current = node\n          }\n          listRef.current = node\n        }}\n        className={cn(\n          \"inline-flex items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n          className\n        )}\n        {...props}\n      />\n      {listHeight && (\n        <div\n          className={cn(\"pointer-events-none absolute inset-0\")}\n          style={{ height: `${listHeight}px` }}\n        >\n          {activeRect && (\n            <motion.div\n              layoutId=\"activeTab\"\n              className={cn(\n                defaultTriggerClasses,\n                \"relative z-10 bg-background shadow-sm\",\n                activeTabClasses\n              )}\n              style={{\n                width: activeRect.width,\n                height: activeRect.height,\n                top: activeRect.top,\n                left: activeRect.left,\n                zIndex: 10,\n              }}\n              initial={false}\n              transition={{\n                type: \"spring\",\n                bounce: 0.2,\n                duration: 0.6,\n              }}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  )\n})\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(defaultTriggerClasses, \"relative z-20\", className)}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}