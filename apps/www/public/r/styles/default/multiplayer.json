{
  "name": "multiplayer",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/multiplayer.tsx",
      "content": "\"use client\"\n\nimport React, { useEffect, useRef, useState } from \"react\"\n\nfunction getContrastColor(hexColor: string): string {\n  // Remove the # if it's there\n  hexColor = hexColor.replace(\"#\", \"\")\n\n  // Convert hex to RGB\n  const r = parseInt(hexColor.substr(0, 2), 16)\n  const g = parseInt(hexColor.substr(2, 2), 16)\n  const b = parseInt(hexColor.substr(4, 2), 16)\n\n  // Calculate brightness\n  const brightness = (r * 299 + g * 587 + b * 114) / 1000\n\n  // Return black only if it's quite a light color (higher threshold)\n  return brightness > 180 ? \"#000000\" : \"#FFFFFF\"\n}\n\ntype CursorVariant = \"default\" | \"outline\"\n\nconst MultiplayerCursor = ({\n  name: initialName = \"John Smith\",\n  color = \"#FFD700\",\n  style = {},\n  variant = \"default\" as CursorVariant,\n}) => {\n  const [name, setName] = useState(initialName)\n  const [position, setPosition] = useState({ x: 0, y: 0 })\n  const [isHovered, setIsHovered] = useState(false)\n  const targetRef = useRef({ x: 0, y: 0 })\n  const frameRef = useRef<number>()\n\n  const [initialPosition] = useState(() => ({\n    x: Math.random() * 100,\n    y: Math.random() * 100,\n  }))\n\n  const [moveInterval] = useState(() => 1500 + Math.random() * 1000) // Random interval between 1.5 and 2.5 seconds\n\n  useEffect(() => {\n    // Set initial position\n    setPosition(initialPosition)\n    targetRef.current = initialPosition\n\n    const updatePosition = () => {\n      setPosition((prevPos) => {\n        const newX = prevPos.x + (targetRef.current.x - prevPos.x) * 0.1\n        const newY = prevPos.y + (targetRef.current.y - prevPos.y) * 0.1\n        return { x: newX, y: newY }\n      })\n      frameRef.current = requestAnimationFrame(updatePosition)\n    }\n\n    frameRef.current = requestAnimationFrame(updatePosition)\n\n    return () => {\n      if (frameRef.current) {\n        cancelAnimationFrame(frameRef.current)\n      }\n    }\n  }, [initialPosition])\n\n  useEffect(() => {\n    const moveRandomly = () => {\n      const randomX = Math.random() * 20 - 10 // Move ±10% from initial position\n      const randomY = Math.random() * 20 - 10 // Move ±10% from initial position\n      targetRef.current = {\n        x: initialPosition.x + randomX,\n        y: initialPosition.y + randomY,\n      }\n      setTimeout(moveRandomly, moveInterval)\n    }\n\n    const initialDelay = Math.random() * 1000 // Random initial delay up to 1 second\n    const timeoutId = setTimeout(moveRandomly, initialDelay)\n\n    return () => clearTimeout(timeoutId)\n  }, [initialPosition, moveInterval])\n\n  useEffect(() => {\n    setName(initialName)\n  }, [initialName])\n\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value)\n  }\n\n  const textColor = getContrastColor(color)\n\n  const cursorSvg =\n    variant === \"default\" ? (\n      <svg\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          d=\"M5 3L19 12L12 13L8 21L5 3Z\"\n          fill={color}\n          stroke=\"white\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          rx=\"2\"\n        />\n      </svg>\n    ) : (\n      <svg\n        width=\"12\"\n        height=\"12\"\n        viewBox=\"0 0 12 12\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <circle cx=\"6\" cy=\"6\" r=\"5\" fill={color} />\n      </svg>\n    )\n\n  const pillStyle =\n    variant === \"default\"\n      ? { backgroundColor: color, color: textColor, marginLeft: \"18px\" }\n      : {\n          backgroundColor: color,\n          color: textColor,\n\n          borderRadius: \"200px\",\n          marginLeft: \"10px\",\n        }\n\n  return (\n    <div\n      className={`pointer-events-auto absolute transition-transform duration-300 ease-out ${\n        isHovered ? \"animate-cursor-hover\" : \"\"\n      }`}\n      style={{\n        left: `${position.x}%`,\n        top: `${position.y}%`,\n        transform: \"translate(-50%, -50%)\",\n        ...style,\n      }}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n    >\n      <div className=\"drop-shadow-md\">{cursorSvg}</div>\n      <div\n        className=\"ml-2 inline-flex items-center overflow-hidden whitespace-nowrap rounded-md px-2 py-1 text-xs drop-shadow-md\"\n        style={pillStyle}\n      >\n        <p className=\"text-xs\">{name}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default MultiplayerCursor\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}